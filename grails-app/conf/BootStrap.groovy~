class BootStrap {
    //def springSecurityService
    def init = { servletContext ->
        
        environments {
            production {
                servletContext.setAttribute("env", "prod")
            }
            development {
                servletContext.setAttribute("env", "dev")
                def userRole = Security.SecRole.findByAuthority('ROLE_USER') ?: new Security.SecRole(authority: 'ROLE_USER').save(failOnError: true)
                def adminRole = Security.SecRole.findByAuthority('ROLE_ADMIN') ?: new Security.SecRole(authority: 'ROLE_ADMIN').save(failOnError: true)     
                def adminUser = Security.SecUser.findByUsername('admin') ?: new Security.SecUser(username: 'admin',password: 'Eevev4Ic',enabled: true).save(failOnError: true)
                def testUser = new Security.SecUser(username: 'elswob',password: 'badger',enabled: true).save(failOnError: true)
                def standardUser = new Security.SecUser(username: 'PBrakefield',password: 'YuaLah4a',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'AMonteiro',password: 'ba1Ohpho',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'MBlaxter',password: 'gaqu2oNa',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'BWasik',password: 'bai7Ucho',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'UKodandaramaiah',password: 'aiz9Xeib',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'PBeldade',password: 'MaeH0ue6',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'ZBas',password: 'thei5Cho',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'AHof',password: 'Wohd7qua',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'TLong',password: 'eiFoo4ae',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'MHughes',password: 'eye7Phei',enabled: true).save(failOnError: true)
                standardUser = new Security.SecUser(username: 'MNitabach',password: 'yaeY5oth',enabled: true).save(failOnError: true)
                
                if (!adminUser.authorities.contains(adminRole)) {
                    Security.SecUserSecRole.create adminUser, adminRole
                }
                Security.SecUserSecRole.create testUser, userRole
                Security.SecUserSecRole.create standardUser, userRole
        
                new bicyclus_anynana.Contig(contig_id: 'contig_1',sequence: 'GGCCCCGGGTTTTTT',gc:'40.1',coverage:'100.2',length:'20', enabled: true).save(failonError: true)
                new bicyclus_anynana.Contig(contig_id: 'contig_2',sequence: 'ACGT',gc:'50.2',coverage:'99.1',length: '10', enabled: true).save(failonError: true)              
                new bicyclus_anynana.Unigene(contig_id:'contig_3', gc:'32.0703653600', length:'739', sequence:'GGGAGGGGCATACACAGAC', coverage:'0.0', enabled: true).save(failonError: true)
    
                
            }
        }
        
        
        
        
    }
    def destroy = {
    }
}
