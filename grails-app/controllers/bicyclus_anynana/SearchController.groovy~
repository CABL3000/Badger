package bicyclus_anynana
import grails.plugins.springsecurity.Secured
import groovy.time.*
@Secured(['ROLE_USER','ROLE_ADMIN'])

class SearchController {
    //def scaffold = true
    def index() { }
    def search = {}
    def search_results = {
    	def timeStart = new Date()
        def table = params.tableSelect
        def searchId = params.searchId

        if (searchId ==""){
            return [empty: "yes"]
        }
        //set the max and offset params for first page
        if (!params.offset){
        	params.offset = "0"
        }
        if (!params.max){
            params.max = "10"
            }
        def offint = params.offset as Integer 
        def maxint = params.max as Integer
        def sum = maxint + offint
        // get the gene annotation data
        if (table == 'Hox1' || params.search =='gene'){
            def results_all = GeneAnno.findAllByDescrLike("%${searchId}%")
            def results = GeneAnno.findAllByDescrLike("%${searchId}%", [sort:"score", order:"desc", max: params.max, offset: params.offset])
            def csvOut=""
            results.each{
                csvOut += it.gene_id + ", " + it.anno_db + ", " + it.anno_id + ", " + it.descr + ", " + it.anno_start + ", " +  it.anno_stop + ", " + it.score
                //println csvOut
                csvOut += "\n"
            }         
            if (sum > results_all.size()){
            	sum = results_all.size()
            }
            def timeStop = new Date()
            def TimeDuration duration = TimeCategory.minus(timeStop, timeStart)
            return [ anno: "yes", results: results, term : searchId , csvOut: csvOut, resCount: results_all.size(), sum: sum, offint: offint, search_time: duration ]
        }
        //get the unigene annotation data
        if (table == 'ATPase' || params.search =='uni'){
        	def results_all = UnigeneAnno.findAllByDescrLike("%${searchId}%")
            def results = UnigeneAnno.findAllByDescrLike("%${searchId}%", [sort:"score", order:"desc", max: params.max, offset: params.offset])
            def csvOut=""
            results.each{
                csvOut += it.contig_id + ", " + it.anno_db + ", " + it.anno_id + ", " + it.descr + ", " + it.anno_start + ", " +  it.anno_stop + ", " + it.score
                //println csvOut
                csvOut += "\n"
            }
            if (sum > results_all.size()){
            	sum = results_all.size()
            }
            def timeStop = new Date()
            def TimeDuration duration = TimeCategory.minus(timeStop, timeStart)
            return [ uni: "yes", results: results, term : searchId , csvOut: csvOut, resCount: results_all.size(), sum: sum, offint: offint, search_time: duration]
        }
        //get the ncrna data
        if (table == 'tRNA'){
            
        }
        //go straight to a genomic contig page
        if (table == 'contig_1' || params.search == 'contig'){
            def contigs = Contig.findAllByContig_idLike(searchId)
            def genes = GeneInfo.findAllByContig_idLike(searchId)
            def fasta = ">"+params.contig_id+"\n"+contigs.sequence[0]+"\n"
            return [ contig: "yes", contigs: contigs, term : searchId, fasta : fasta, genes: genes ]
        }
        //go straight to a gene page
        if (table == 'gene_1'){
            
        }
    }
    def gene_info = {
    	def offint = params.offset as Integer 
        def maxint = params.max as Integer
        def sum = maxint + offint
        def info_results = GeneInfo.findAllByGene_id(params.gene_id)
        def anno_results = GeneAnno.findAllByGene_id(params.gene_id,[sort:"score", order:"desc", max:params.max, offset:params.offset])
        def nuc_fasta = ">"+info_results.gene_id[0]+"\n"+info_results.nuc[0]+"\n"
        def pep_fasta = ">"+info_results.gene_id[0]+"\n"+info_results.pep[0]+"\n"
        return [ info_results: info_results, anno_results: anno_results, nuc_fasta: nuc_fasta, pep_fasta: pep_fasta]
    }
    def unigene_info = {
    	if (!params.offset){
        	params.offset = "0"
        }
        if (!params.max){
            params.max = "10"
        }  
    	def offint = params.offset as Integer 
        def maxint = params.max as Integer
        def sum = maxint + offint
        def anno_results_all = UnigeneAnno.findAllByContig_id(params.contig_id)
        def info_results = UnigeneInfo.findAllByContig_id(params.contig_id)
        def anno_results = UnigeneAnno.findAllByContig_id(params.contig_id,[sort:"score", order:"desc", max:params.max, offset:params.offset])
        def nuc_fasta = ">"+info_results.contig_id[0]+"\n"+info_results.sequence[0]+"\n"
        if (sum > anno_results_all.size()){
            	sum = anno_results_all.size()
            }
        return [ info_results: info_results, anno_results: anno_results, nuc_fasta: nuc_fasta, resCount: anno_results_all.size(), sum: sum, offint: offint]
    }
}
