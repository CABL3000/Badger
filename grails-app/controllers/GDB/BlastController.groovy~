package bicyclus_anynana
import grails.plugins.springsecurity.Secured
@Secured(['ROLE_USER','ROLE_ADMIN'])

class BlastController { 
    def info = {}
    def index() { }
    def runBlast = {
        def db = "demo/"+params.DATALIB
        def program = "/usr/software/blast/ncbi-blast-2.2.21+/bin/"+params.PROGRAM
        def eval = params.EXPECT
        def blastSeq = params.blastId
        def numDesc = params.DESCRIPTIONS
        def numAlign = params.ALIGNMENTS
        def unGap = params.UNGAPPED_ALIGNMENT
        def outFmt = params.ALIGNMENT_VIEW
        if (unGap == "is_set" && params.program == "blastn"){
            unGap = "-ungapped"
        }else{
            unGap = ""
        }
        //remove any whitespace in user input fasta file
        def blastSeqTrim = blastSeq.trim()
        List li=new ArrayList();
        //split file by new lines
        blastSeqTrim.split("\n").each{
            li.add(it)
            //println it
        }
        //assume first line is fasta header
        def blastName = li[0]
        //get rid of the >
        blastName = blastName.replaceAll(/>/, "") 
        //generate unique id
        def uuid = UUID.randomUUID()
        def blastJobId = "/tmp/blast_job_"+uuid
        println "blast Name = " + blastName
        println "blast job Id = " + blastJobId
        //runAsync {
            println "writing fasta to file"
            File f = new File(blastJobId)
            f.write(blastSeq)
            def BlastOutFile = new File(blastJobId+".out")       
            println "running BLAST"
            //outFmt="\"7 sseqid ssac qstart qend sstart send qseq evalue bitscore\""
            def comm = "$program -db $db -outfmt $outFmt -num_threads 1 -query $blastJobId -evalue $eval -num_descriptions $numDesc -num_alignments $numAlign -out $BlastOutFile $unGap"
            def p = comm.execute()   
            println comm
            //wait until the blast has finished     
            p.waitFor()
            println "finished BLAST"
            println "open BLAST output"
            //def blastOut = p.text
            List blastRes = new ArrayList();
            def queryInfo = []
            def hitInfo = []
            def singleHit = [:]
            def matcher
            def oldId
            def newId =""
            //check output file has something in it
            if (BlastOutFile.length() > 0){
                println "$BlastOutFile  has file size "+BlastOutFile.length()
                def blastOut = new File("$BlastOutFile").text
                 //split blast result by new lines
                blastOut.split("\n").each{  
                    //create internal links markers
                    if ((matcher = it =~ /^\s{2}(\w+).*?\s+(.*?)\s{4}(\d{1}[e\.].*?)$/)){
                        def linker = matcher[0][1]
                        it = it.replaceAll(/$linker/,"<a href=\"#$linker\">$linker</a>")
                    }
                    //get the query length
                    if ((matcher = it =~ /^Length=(.*)/)){
                        if (queryInfo.size()==0){ 
                            queryInfo.add(matcher[0][1])
                        }
                     }
                    if ((matcher = it =~ /^>\s(\w+)/)){
                        //add name attribute to alignment for anchor
                        def linker = matcher[0][1]
                        it = it.replaceAll(/>/,"<a name=\"$linker\">></a>")                       
                        //transform IDs to links but not before the first alignment
                        it = it.replaceAll(/\|([A-Z0-9]*[A-Z0-9]*[A-Z0-9]*[A-Z0-9]*[A-Z0-9]*[A-Z0-9])\|/, "<a href=\"http://www.ncbi.nlm.nih.gov/protein/\$1\" target=\'_blank\'>|\$1|</a>") 
                        //it = it.replaceAll(/gi\|(\d+)\|/, "<a href=\"http://www.ncbi.nlm.nih.gov/protein/\$1\" target=\'_blank\'>gi|\$1|</a>") 
                        //it = it.replaceAll(/>\s+(contig_\d+)/, "<g:link action=\"unigene_info\" params=\"${[contig_id: '$1']}\">\$1</g:link>") 
                        //it = it.replaceAll(/(contig_\d+)/, "<a href=\"/search/search_results?contig_id=\$1\" target=\'_blank\'>\$1</a>") 
                        oldId = newId
                        newId = matcher[0][1]                    
                    }
                    if ((matcher = it =~ /\s+Score\s=\s+(.*?)\s+bits.*/)){
                        //check the alignment has been parsed
                        if (singleHit['start']!=null){
                            //check if it is a multiple HSP
                            if (oldId != ""){
                                singleHit.id = oldId
                            }else{
                                singleHit.id = newId
                            }
                            hitInfo.add(singleHit)  
                            singleHit = [:]
                            oldId = ""
                        }
                        singleHit.id = oldId
                        singleHit.score=matcher[0][1]    
                        singleHit.score
                    }                   
                    //get start
                    if ((matcher = it =~ /^Sbjct\s+(\d+).*/)){
                        //only want the first one
                        if (singleHit['start']==null){
                            singleHit.start=matcher[0][1]    
                            singleHit.start
                        }
                    }
                    //get stop
                    if ((matcher = it =~ /^Sbjct.*?\s+(\d+)$/)){              
                        singleHit.stop=matcher[0][1]    
                        singleHit.stop
                    }
                    blastRes.add(it)                   
                }
                //catch the last one
                if (oldId != ""){
                    singleHit.id = oldId
                }else{
                    singleHit.id = newId
                }
                hitInfo.add(singleHit)
            }else{
                println "BLAST result is empty"
                blastRes = []
            }
            def sortedHitInfo = hitInfo.sort{it.score as double}.reverse()
            def jsonData = sortedHitInfo.encodeAsJSON();
            return[blast_result: blastRes, term: blastName, command: comm, blastId: blastJobId, hitData: sortedHitInfo, queryInfo: queryInfo, jsonData: jsonData]
        //}
    }
    def test = {}
}
